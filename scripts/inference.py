#!/usr/bin/env python3
import os
import argparse
import cv2 # OpenCV for drawing

try:
    from ultralytics import YOLO
    from ultralytics.utils.plotting import Annotator, colors
except ImportError:
    print("Error: ultralytics or its dependencies not found.")
    print("Please ensure ultralytics is installed: pip install ultralytics")
    print("You might also need opencv: pip install opencv-python")
    exit(1)

def run_inference(model_path, image_path, output_path=None, conf_thresh=0.25):
    """Runs YOLO inference, draws predictions, saves image, and returns boxes.

    Returns:
        A list of dictionaries, where each dictionary represents a detected box:
        [{'box': [x_min, y_min, x_max, y_max], 'label': class_name, 'confidence': conf}, ...]
        Returns an empty list if errors occur or no boxes are detected.
    """

    print("--- Running YOLOv8 Inference ---")
    print(f"Model Path: {model_path}")
    print(f"Image Path: {image_path}")
    print(f"Confidence Threshold: {conf_thresh}")

    # --- Validate inputs ---
    if not os.path.exists(model_path):
        print(f"Error: Model weights file not found at {model_path}")
        return []
    if not os.path.exists(image_path):
        print(f"Error: Input image file not found at {image_path}")
        return []

    # --- Load Model ---
    try:
        model = YOLO(model_path)
        print(f"Model loaded successfully. Class names: {model.names}")
    except Exception as e:
        print(f"Error loading model: {e}")
        return []

    # --- Load Image ---
    try:
        img = cv2.imread(image_path)
        if img is None:
             print(f"Error: Failed to load image {image_path} using OpenCV.")
             return []
        print(f"Image loaded successfully (shape: {img.shape})")
    except Exception as e:
        print(f"Error reading image with OpenCV: {e}")
        return []

    # --- Run Prediction ---
    try:
        results = model.predict(image_path, conf=conf_thresh)
        if not results or len(results) == 0:
            print("No predictions generated by the model.")
            # Optionally save the original image if no predictions
            if output_path:
                 cv2.imwrite(output_path, img)
                 print(f"Saved original image (no predictions) to: {output_path}")
            return []
        
        # Assuming results[0] contains the predictions for the single image
        preds = results[0]
        print(f"Prediction complete. Found {len(preds.boxes)} potential boxes.")

    except Exception as e:
        print(f"Error during model prediction: {e}")
        return []

    # --- Draw Bounding Boxes ---
    annotator = Annotator(img, line_width=2, example=str(model.names))
    detected_boxes = 0
    boxes = []
    for box in preds.boxes:
        class_id = int(box.cls.item()) # Get class ID
        conf = box.conf.item()        # Get confidence score
        coords = box.xyxy[0].tolist() # Get coordinates [x1, y1, x2, y2]
        
        # label = f"{model.names[class_id]}: {conf:.2f}" # Removed label generation
        annotator.box_label(coords, label=None, color=colors(class_id, True)) # Pass None for label
        detected_boxes += 1
        boxes.append({'box': coords, 'label': model.names[class_id], 'confidence': conf})
    
    print(f"Drew {detected_boxes} boxes above confidence threshold {conf_thresh}.")
    output_image = annotator.result()

    # --- Save Output Image ---
    if output_path is None:
        # Create default output path
        base, ext = os.path.splitext(image_path)
        output_path = f"{base}_predicted{ext}"

    try:
        cv2.imwrite(output_path, output_image)
        print(f"Output image saved successfully to: {output_path}")
    except Exception as e:
        print(f"Error saving output image to {output_path}: {e}")

    return boxes


if __name__ == "__main__":
    # Default path to the best weights from the last run (adjust if needed)
    # You might need to change 'my_medium_run2' if you used a different name
    DEFAULT_MODEL_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), '../runs/detect/my_medium_run2/weights/best.pt'))

    parser = argparse.ArgumentParser(description="Run YOLOv8 inference on an image and save the output.")
    parser.add_argument("--model", type=str, default=DEFAULT_MODEL_PATH,
                        help="Path to the trained YOLOv8 model weights (.pt file).")
    parser.add_argument("--image", required=True, type=str,
                        help="Path to the input image file.")
    parser.add_argument("--output", type=str, default=None,
                        help="Path to save the output image with predictions. Defaults to <input_image_name>_predicted.<ext>")
    parser.add_argument("--conf", type=float, default=0.25,
                        help="Confidence threshold for displaying predictions (0.0 to 1.0).")

    args = parser.parse_args()

    # Simple check if default model path exists
    if args.model == DEFAULT_MODEL_PATH and not os.path.exists(DEFAULT_MODEL_PATH):
         print(f"Warning: Default model path {DEFAULT_MODEL_PATH} not found.")
         print("Please ensure the path is correct or specify the model using --model")
         # Optionally try to find the latest run automatically?

    run_inference(
        model_path=args.model,
        image_path=args.image,
        output_path=args.output,
        conf_thresh=args.conf
    ) 